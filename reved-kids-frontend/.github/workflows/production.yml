name: üöÄ Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/reved-kids-frontend

jobs:
  # =============================================================================
  # Quality Checks
  # =============================================================================
  lint-and-format:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: reved-kids-frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./reved-kids-frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./reved-kids-frontend
        run: npm run lint

      - name: Check Prettier formatting
        working-directory: ./reved-kids-frontend
        run: npm run format:check

      - name: TypeScript check
        working-directory: ./reved-kids-frontend
        run: npm run type-check

  # =============================================================================
  # Testing
  # =============================================================================
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: reved-kids-frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./reved-kids-frontend
        run: npm ci

      - name: Run unit tests
        working-directory: ./reved-kids-frontend
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./reved-kids-frontend/coverage/lcov.info

  # =============================================================================
  # E2E Testing
  # =============================================================================
  e2e-tests:
    name: üéØ E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: reved-kids-frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./reved-kids-frontend
        run: npm ci

      - name: Install Playwright
        working-directory: ./reved-kids-frontend
        run: npx playwright install --with-deps

      - name: Build application
        working-directory: ./reved-kids-frontend
        run: npm run build

      - name: Run E2E tests
        working-directory: ./reved-kids-frontend
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: reved-kids-frontend/playwright-report/

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: reved-kids-frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./reved-kids-frontend
        run: npm ci

      - name: Run npm audit
        working-directory: ./reved-kids-frontend
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=reved-kids-frontend/package.json --severity-threshold=high

  # =============================================================================
  # Build & Push Docker Image
  # =============================================================================
  build-and-push:
    name: üèóÔ∏è Build & Push
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, e2e-tests, security-scan]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./reved-kids-frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            REACT_APP_VERSION=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    name: üöÄ Deploy Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.revedkids.com
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build-and-push.outputs.image-tag }} to staging"
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/frontend frontend=${{ needs.build-and-push.outputs.image-tag }}

      - name: Run health check
        run: |
          curl -f https://staging.revedkids.com/health || exit 1

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://revedkids.com
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ${{ needs.build-and-push.outputs.image-tag }} to production"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/frontend frontend=${{ needs.build-and-push.outputs.image-tag }}

      - name: Run health check
        run: |
          curl -f https://revedkids.com/health || exit 1

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
